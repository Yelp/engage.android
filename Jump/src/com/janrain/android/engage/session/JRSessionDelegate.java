/*
 *  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *  Copyright (c) 2011, Janrain, Inc.
 *
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation and/or
 *    other materials provided with the distribution.
 *  * Neither the name of the Janrain, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 *  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */
package com.janrain.android.engage.session;

import com.janrain.android.engage.JREngageError;
import com.janrain.android.engage.net.async.HttpResponseHeaders;
import com.janrain.android.engage.types.JRActivityObject;
import com.janrain.android.engage.types.JRDictionary;

/**
 * @internal
 *
 * @interface JRSessionDelegate
 **/
public interface JRSessionDelegate {

    /**
     * Triggered when the authentication restarts because:
     *  - the user presses the back button from the landing screen, or the webview
     *  - the user presses the switch accounts button on the landing screen
     *  - the webview receives a ~"result canceled" response from Engage
     */
    void authenticationDidRestart();

    /**
     * Triggered by the calling application via JREngage.cancelAuthentication
     */
    void authenticationDidCancel();

    /**
     * Triggered when JRWebViewActivity recieves a success message from Engage.
     *  @param profile
     *   The profile received for the user from Engage
     *  @param provider
     *   The provider the user authenticated with
     */
    void authenticationDidComplete(JRDictionary profile, String provider);

    /**
     * Triggered when the Engage authentication flow completes with an Engage error, or when there
     * is an error loading a URL during that authentication flow.
     * @param error
     *  The error the library failed with
     * @param provider
     *  The provider the library was attempting to authenticate the user with at the time of failure
     */
    void authenticationDidFail(JREngageError error, String provider);

    /**
     * Triggered when
     * @param tokenUrl
     *  The token URL posted to
     * @param responseHeaders
     *  The headers received in the response
     * @param payload
     *  The body of the received response
     * @param provider
     *  The provider the user authenticated with
     */
    void authenticationDidReachTokenUrl(String tokenUrl,
                                        HttpResponseHeaders responseHeaders,
                                        String payload,
                                        String provider);

    /**
     * Triggered when the call to the token URL fails -- due to network error
     * @param tokenUrl
     *  The token URL posted to
     * @param error
     *  The error generated by the failure
     * @param provider
     *  The provider the user authenticated with that preceded the failed token URL post
     */
    void authenticationCallToTokenUrlDidFail(String tokenUrl, JREngageError error, String provider);

    /**
     * Triggered when the user is signed out via JREngage#forgetAuthenticatedUser and it's variant
     * @param provider
     *  The provider the user was signed out of
     */
    void userWasSignedOut(String provider);

    /**
     * Triggered triggered by the calling application via JREngage.cancelPublishing
     */
    void publishingDidCancel();

    /**
     * Triggered when the publishing dialog closes
     */
    void publishingDidComplete();

    /**
     * Triggered when a success response is received from Engage from the activity API
     * @param activity
     *  The JRActivityObject that was published
     * @param provider
     *  The provider by which the JRActivityObject was published
     */
    void publishingJRActivityDidSucceed(JRActivityObject activity, String provider);

    /**
     * Triggered when an error is encountered while publishing the activity via Engage
     * @param activity
     *  The activity that failed to be shared
     * @param error
     *  The error produced by the failure
     * @param provider
     *  The provider that the activity was attempting to be shared via
     */
    void publishingJRActivityDidFail(JRActivityObject activity, JREngageError error, String provider);

    /**
     * Triggered when the publishing UI fails to load
     * @param error
     *  The error produced by the failure of the publishing dialog to display
     */
    void publishingDialogDidFail(JREngageError error);

    /**
     * Triggered when JRSession has finished loading the mobile configuration
     */
    void configDidFinish();

    /**
     * @internal
     * An empty implementation of JRSessionDelegate. Handy for subclassing, and overriding only
     * desirable message handlers.
     */
    public static abstract class SimpleJRSessionDelegate implements JRSessionDelegate {
        public void authenticationDidRestart() {}
        public void authenticationDidCancel() {}
        public void authenticationDidComplete(JRDictionary profile, String provider) {}
        public void authenticationDidFail(JREngageError error, String provider) {}
        public void authenticationDidReachTokenUrl(String tokenUrl,
                                                   HttpResponseHeaders responseHeaders,
                                                   String payload,
                                                   String provider) {}
        public void authenticationCallToTokenUrlDidFail(String tokenUrl,
                                                        JREngageError error,
                                                        String provider) {}
        public void userWasSignedOut(String provider) {}
        public void publishingDidCancel() {}
        public void publishingDidComplete() {}
        public void publishingJRActivityDidSucceed(JRActivityObject activity, String provider) {}
        public void publishingDialogDidFail(JREngageError error) {}
        public void publishingJRActivityDidFail(JRActivityObject activity,
                                                JREngageError error,
                                                String provider) {}
        public void configDidFinish() {}
    }
}
